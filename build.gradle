def configDir = new File(rootDir, 'config')

task wrapper(type: Wrapper) {
    gradleVersion = '1.7'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    configurations {
        provided
        provided.extendsFrom(compile)
    }
}

configure(subprojects) {
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'

    group = 'org.mongodb.morphia'
    version = '0.106-SNAPSHOT'

    sourceCompatibility = '1.5'
    targetCompatibility = '1.5'

    configurations {
        provided
    }

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        testCompile 'junit:junit:4.11'
        compile 'org.mongodb:mongo-java-driver:[2.10.1,2.15]'
    }

    sourceSets.main.compileClasspath += configurations.provided
    sourceSets.test.compileClasspath += configurations.provided

    if (properties['xlint']) {
        tasks.withType(Compile) {
            options.compilerArgs << "-Xlint:unchecked"
        }
    }
    
    project.ext.buildingWith = { n -> project.hasProperty(n) && project.property(n).toBoolean()
    }

    /* Code quality */
    checkstyle {
        configFile = new File("$configDir/checkstyle.xml")
    }

    findbugs { excludeFilter = new File("$configDir/findbugs-exclude.xml") }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = project.buildingWith('xmlReports.enabled')
            html.enabled = !project.buildingWith('xmlReports.enabled')
        }
    }
    
    javadoc {
        options.author = true
        options.version = true
        options.links 'http://docs.oracle.com/javase/7/docs/api/'
    }
}

project(':morphia') {
    dependencies {
        compile 'cglib:cglib-nodep:[2.1_3,3.0)'
        compile 'com.thoughtworks.proxytoys:proxytoys:1.0'
    }

    idea.module {
        iml {
            withXml { provider ->

                def node = provider.node.component.find { it.@name == 'CheckStyle-IDEA-Module' }
                if (node == null) {
                    node = provider.node.appendNode('component')
                }
                node.replaceNode {
                    component(name: 'CheckStyle-IDEA-Module') {
                        option(name: 'configuration') {
                            map {
                                entry(key: 'active-configuration', value: 'FILE:$PROJECT_DIR$/config/checkstyle-lite.xml:Lite')
                            }
                        }
                    }
                }

            }
        }
    }
}

project(':validation') {
    dependencies {
        compile 'javax.validation:validation-api:1.0.0.GA'
        testCompile 'org.hibernate:hibernate-validator:4.1.0.Final'
        compile project(':morphia')
    }
}

project(':entityscanner-plug') {
    dependencies {
        compile('org.reflections:reflections:0.9.8') {
            'servlet-api:javax.servlet'
            'com.google.code.gson:gson'
            'logback-classic:ch.qos.logback'
            'xml-apis:xml-apis'
        }
        compile 'com.google.collections:google-collections:1.0'
        compile('org.scannotation:scannotation:1.0.3') {
            'javassist:javassist'
        }
        testCompile 'org.slf4j:slf4j-simple:1.5.6'
        compile project(':morphia')
    }
}

project(':guice-plug') {
    dependencies {
        provided 'com.google.inject:guice:3.0'
        compile project(':morphia')
    }
}

project(':jrebel-plug') {}

project(':gwt') {
    sourceSets {
        main {
            java { srcDirs = [] }
        }
    }
}

project('morphia') {
}

idea {
    project {
        languageLevel = '1.5'
        ipr {
            withXml { provider ->
                def mapping = provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping
                mapping.@vcs = 'Git'
                mapping.@directory = '$PROJECT_DIR$'

                def node = provider.node.component.find { it.@name == 'CheckStyle-IDEA-Module' } ?: provider.node.appendNode('component')
                node.replaceNode {
                    component(name: 'CheckStyle-IDEA') {
                        option(name: 'configuration') {
                            map {
                                entry(key: 'active-configuration', value: 'FILE:$PROJECT_DIR$/config/checkstyle.xml:Default')
                                entry(key: 'check-test-classes', value: true)
                                entry(key: 'check-nonjava-files', value: false)
                                entry(key: 'location-0', value: 'FILE:$PROJECT_DIR$/config/checkstyle.xml:Default')
                                entry(key: 'location-1', value: 'FILE:$PROJECT_DIR$/config/checkstyle-lite.xml:Lite')
                            }
                        }
                    }
                }

                node = provider.node.component.find { it.@name == 'CopyrightManager' } ?: provider.node.appendNode('component')
                node.replaceNode {
                    component(name: 'CopyrightManager', default: 'MongoDB') {
                        copyright {
                            option(name: 'notice', value: 'Copyright (c) 2008 - \$today.year MongoDB, ' +
                                'Inc. <http://mongodb.com>\n\nLicensed under the Apache License, ' +
                                'Version 2.0 (the "License");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.')
                            option(name: 'keyword', value: 'Copyright')
                            option(name: 'allowReplaceKeyword', value: '')
                            option(name: 'myName', value: 'MongoDB')
                            option(name: 'myLocal', value: true)
                        }
                        module2copyright {
                            element(module: 'Project Files', copyright: 'MongoDB')
                        }
                        LanguageOptions(name: 'XML') {
                            option(name: 'fileTypeOverride', value: 1)
                            option(name: 'prefixLines', value: false)
                        }
                    }
                }
            }
            beforeMerged { project ->
                project.modulePaths.clear()
            }
        }
    }
    
    module {
        scopes.RUNTIME.plus += configurations.provided
    }
}



//apply from: 'gradle/ide-settings.gradle'
apply from: 'gradle/maven-deployment.gradle'
apply from: 'gradle/osgi-compatibility.gradle'